substitutions:
  device_description: "Lanbon L8"
  name: l8-disp
  friendly_name: L8 Display
  climate_device: climate.yourdevicehere


esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  comment: "${device_description}"

globals:
  - id: spinbox_user_changing
    type: bool
    restore_value: no
    initial_value: 'false'

esp32:
  board: esp32dev
  framework:
    type: arduino


# Enable logging
logger:

web_server:
  port: 80

# Enable Home Assistant API
api:
  encryption:
    key: 

ota:
  - platform: esphome
    password: 

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${name} Fallback Hotspot"
    password: "4uOxfIyMBf8F"

sensor:
  # Sensor for Current Ambient Temperature
  - platform: homeassistant
    id: ha_ambient_temp # Will be used by template climate
    entity_id: ${climate_device}
    attribute: current_temperature
    internal: true
    on_value:
      then:
        - script.execute: update_ac_display_script

  # Sensor for Current Target Temperature
  - platform: homeassistant
    id: ha_target_temp # Will be used by template climate
    entity_id: ${climate_device}
    attribute: temperature # This is the target temperature attribute
    internal: true
    on_value:
      then:
        - script.execute: update_ac_display_script

text_sensor:
  # Text Sensor for Current HVAC Mode (e.g., "cool", "heat", "off")
  - platform: homeassistant
    id: ha_hvac_mode_str # Renamed for clarity, will be used by template climate
    entity_id: ${climate_device}
    # The 'state' of a climate entity in HA usually holds the mode (e.g., "cool", "heat", "off", "auto")
    # No 'attribute' needed if we are reading the main state of the entity.
    # If your climate entity's main state is just "on"/"off", then we might need an attribute.
    # For now, assuming main state is the mode.
    internal: true
    on_value:
      then:
        - script.execute: update_ac_display_script

  # Text Sensor for Current Fan Mode (e.g., "auto", "low", "high")
  - platform: homeassistant
    id: ha_fan_mode_str # Renamed for clarity, will be used by template climate
    entity_id: ${climate_device}
    attribute: fan_mode
    internal: true
    on_value:
      then:
        - script.execute: update_ac_display_script



time:
  - platform: homeassistant
    id: homeassistant_time


psram:
 speed: 80MHz

spi:
  clk_pin: GPIO19  
  mosi_pin: GPIO23 
  miso_pin: GPIO25 

i2c:
  sda: GPIO4
  scl: GPIO0

display:
  - platform: mipi_spi
    model: LANBON-L8
    cs_pin: GPIO22
    dc_pin: GPIO21
    reset_pin: GPIO18
    invert_colors: false
    auto_clear_enabled: false
    update_interval: never
    show_test_card: true 
    id: disp
    # rotation: 180

output:
  - platform: ledc
    pin: GPIO5
    id: backlight_pwm
  - platform: ledc
    id: mood_red
    pin: GPIO26
  - platform: ledc
    id: mood_green
    pin: GPIO32
  - platform: ledc
    id: mood_blue
    pin: GPIO33        

light:
  - platform: monochromatic
    output: backlight_pwm
    name: "Display Backlight"
    id: backlight
    restore_mode: ALWAYS_ON
  - platform: rgb
    name: "Moodlight"
    red: mood_red
    green: mood_green
    blue: mood_blue

touchscreen:
  platform: ft63x6
  id: touch
  display: disp
  calibration:
    x_min: 0
    y_min: 0
    x_max: 230
    y_max: 312

  on_touch:
    - lambda: |-
          ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
              touch.x,
              touch.y,
              touch.x_raw,
              touch.y_raw
              );
  on_release:
    - if:
        condition: lvgl.is_paused
        then:
          - logger.log: "LVGL resuming"
          - lvgl.resume:
          - lvgl.widget.redraw:
          - light.turn_on: backlight

lvgl:
  displays:
    - disp
  default_font: montserrat_24
  buffer_size: 75%
  on_idle:
    timeout: !lambda "return (id(display_timeout).state * 1000);"
    then:
      - logger.log: "LVGL is idle"
      - light.turn_off: backlight
      - lvgl.pause:

#time: !lambda "return  id(homeassistant_time).now();"
  style_definitions:
    - id: header_footer
      bg_color: 0x2F8CD8
      bg_grad_color: 0x005782
      bg_grad_dir: VER
      bg_opa: COVER
      border_opa: TRANSP
      radius: 0
      pad_all: 0
      pad_row: 0
      pad_column: 0
      border_color: 0x0077b3
      text_color: 0xFFFFFF
      width: 100%
      height: 30
      text_font: montserrat_18
    
    - id: ac_button_style
      bg_color: 0x4A4A4A # Dark grey
      text_color: 0xFFFFFF
      radius: 5
      border_width: 1
      border_color: 0x6A6A6A
      pad_all: 1
      text_font: montserrat_14
    - id: ac_button_active_style
      bg_color: 0x0077b3 # Blue
      text_color: 0xFFFFFF
      radius: 5
      border_width: 1
      border_color: 0x2F8CD8
      pad_all: 1
      text_font: montserrat_14

    - id: obj_style
      pad_all: 1
      pad_left: 3
      pad_right: 3 
  pages:
    - id: main_page
      widgets:
        - obj:
            align: TOP_MID
            styles: header_footer
            widgets:
              - label:
                  text: "Bedroom"
                  align: CENTER
                  text_align: CENTER
                  text_color: 0xFFFFFF  
                  id: head_label

        # AC Control UI Container
        - obj:
            id: ac_controls_container
            x: 0
            y: 30 # Position below the header
            width: 239 # Full width of Lanbon L8 display
            height: 280 # Remaining height (320 total - 30 header - 5 padding approx)
            # Styles for this container can be added if needed, e.g., background
            widgets:
              # Row 1: Target Temp Controls
              - obj: # Temperature spinbox container
                  align: TOP_LEFT
                  x: 5
                  y: 1
                  layout:
                    type: FLEX
                    flex_flow: ROW
                    flex_align_cross: CENTER
                  width: SIZE_CONTENT
                  height: SIZE_CONTENT
                  styles: obj_style
                  widgets:
                    - button:
                        id: spin_down
                        styles: ac_button_style
                        width: 40
                        height: 35
                        on_click:
                          - lvgl.spinbox.decrement: temp_spinbox
                        widgets:
                          - label:
                              text: "-"
                              align: CENTER
                              text_font: montserrat_24
                    - spinbox:
                        id: temp_spinbox
                        align: CENTER
                        text_align: CENTER
                        width: 80
                        height: 45
                        range_from: 16
                        range_to: 30
                        step: 1
                        rollover: false
                        digits: 2
                        decimal_places: 0
                        text_font: montserrat_24
                        cursor:
                          opa: transp
                        on_value:
                          then:
                            - lambda: |-
                                ESP_LOGD("spinbox", "User changed spinbox to: %d", (int)x);
                                id(spinbox_user_changing) = true;
                            - homeassistant.service:
                                service: climate.set_temperature
                                data_template:
                                  entity_id: ${climate_device}
                                  temperature: !lambda return x;
                            - delay: 2s  # Give time for HA to process
                            - lambda: |-
                                id(spinbox_user_changing) = false;
                    - button:
                        id: spin_up
                        styles: ac_button_style
                        width: 40
                        height: 35
                        on_click:
                          - lvgl.spinbox.increment: temp_spinbox
                        widgets:
                          - label:
                              text: "+"
                              align: CENTER
                              text_font: montserrat_24

              # Row 2: Power Button & Status (Mode/Fan)
              - button: # Power Button
                  id: power_btn
                  styles: ac_button_style # Initial style, will be updated by script
                  align: TOP_LEFT
                  x: 0
                  y: 77 # Spacing below temp controls
                  width: 100 # Wider button
                  height: 40
                  on_click:
                    - if:
                        condition:
                          lambda: 'return id(ha_hvac_mode_str).state == "off";'
                        then:
                          - homeassistant.service:
                              service: climate.set_hvac_mode
                              data:
                                entity_id: ${climate_device}
                                hvac_mode: "auto"
                        else:
                          - homeassistant.service:
                              service: climate.turn_off
                              data:
                                entity_id: ${climate_device}
                    - script.execute: update_ac_display_script
                  widgets:
                    - label: { id: power_btn_label, align: "center", text: "POWER", text_font: montserrat_16 } # Text updated by script
              - label: # AC Status (Mode, Fan & Temp)
                  id: ac_status_label
                  align: TOP_LEFT
                  x: 120
                  y: 75
                  width: 110 
                  height: 60 # Allow for three lines
                  text_font: montserrat_14
                  text: "Mode: --\nFan: --\nTemp: --°C" # Updated by script

              # Row 3: Mode Selection
              - label: # Mode Title
                  align: TOP_LEFT
                  x: 10
                  y: 122 # Spacing
                  text: "Mode:"
                  text_font: montserrat_16
              - obj: # Container for Mode Buttons
                  align: TOP_MID
                  x: 0
                  y: 140
                  width: 220 # Slightly less than full width for padding
                  height: 40
                  pad_all: 1
                  layout:
                    type: FLEX
                    flex_flow: ROW # Arrange buttons in a row
                    flex_align_main: SPACE_EVENLY # Distribute space
                    flex_align_cross: CENTER
                  widgets:
                    - button: 
                        id: mode_auto_btn
                        styles: ac_button_style
                        width: 65
                        height: 30
                        on_click: 
                          - homeassistant.service:
                              service: climate.set_hvac_mode
                              data:
                                entity_id: ${climate_device}
                                hvac_mode: "auto"
                          - script.execute: update_ac_display_script
                        widgets: 
                          - label: {text: "Auto", align: CENTER}
                    - button:
                        id: mode_cool_btn
                        styles: ac_button_style
                        width: 65
                        height: 30
                        on_click:
                          - homeassistant.service:
                              service: climate.set_hvac_mode
                              data:
                                entity_id: ${climate_device}
                                hvac_mode: "cool"
                          - script.execute: update_ac_display_script
                        widgets:
                          - label: {text: "Cool", align: CENTER}
                    - button:
                        id: mode_heat_btn
                        styles: ac_button_style
                        width: 65
                        height: 30
                        on_click:
                          - homeassistant.service:
                              service: climate.set_hvac_mode
                              data:
                                entity_id: ${climate_device}
                                hvac_mode: "heat"
                          - script.execute: update_ac_display_script
                        widgets:
                          - label: {text: "Heat", align: CENTER}
                    # Add other modes like FAN_ONLY, DRY if supported and desired

              # Row 4: Fan Speed Selection
              - label: # Fan Title
                  align: TOP_LEFT
                  x: 10
                  y: 185 # Spacing
                  text: "Fan:"
                  text_font: montserrat_16
              - obj: # Container for Fan Buttons
                  align: TOP_MID
                  x: 0
                  y: 205
                  width: 228 # Slightly less than full width
                  height: 40
                  pad_all: 2
                  layout:
                    type: FLEX
                    flex_flow: ROW
                    flex_align_main: SPACE_EVENLY
                    flex_align_cross: CENTER
                  widgets:
                    - button:
                        id: fan_auto_btn
                        styles: ac_button_style
                        width: 49
                        height: 30
                        on_click:
                          - homeassistant.service:
                              service: climate.set_fan_mode
                              data:
                                entity_id: ${climate_device}
                                fan_mode: "auto"
                          - script.execute: update_ac_display_script
                        widgets:
                          - label: {text: "Auto", align: CENTER}
                    - button:
                        id: fan_low_btn
                        styles: ac_button_style
                        width: 47
                        height: 30
                        on_click:
                          - homeassistant.service:
                              service: climate.set_fan_mode
                              data:
                                entity_id: ${climate_device}
                                fan_mode: "low"
                          - script.execute: update_ac_display_script
                        widgets:
                          - label: {text: "Low", align: CENTER}
                    - button:
                        id: fan_med_btn
                        styles: ac_button_style
                        width: 47
                        height: 30
                        on_click:
                          - homeassistant.service:
                              service: climate.set_fan_mode
                              data:
                                entity_id: ${climate_device}
                                fan_mode: "medium"
                          - script.execute: update_ac_display_script
                        widgets:
                          - label: {text: "Med", align: CENTER}
                    - button:
                        id: fan_high_btn
                        styles: ac_button_style
                        width: 47
                        height: 30
                        on_click:
                          - homeassistant.service:
                              service: climate.set_fan_mode
                              data:
                                entity_id: ${climate_device}
                                fan_mode: "high"
                          - script.execute: update_ac_display_script
                        widgets:
                          - label: {text: "High", align: CENTER}
                    # Add other fan modes if supported

switch:
  - platform: gpio
    pin: GPIO12
    name: relay1
    id: relay1
  - platform: gpio
    pin: GPIO14
    name: relay2
    id: relay2
  - platform: gpio
    pin: GPIO27
    name: relay3
    id: relay3




binary_sensor:
  - platform: status
    name: Status sensor

number:
  - platform: template
    name: LVGL Screen timeout
    optimistic: true
    id: display_timeout
    unit_of_measurement: "s"
    initial_value: 45
    restore_value: true
    min_value: 10
    max_value: 180
    step: 5
    mode: box

# Climate platform removed due to ESPHome environment issues
# Direct control through LVGL UI and Home Assistant services

script:
  - id: update_ac_display_script
    then:
      - lambda: |-
          // Update Spinbox with Target Temperature
          // Only update if the spinbox value differs from the sensor value to avoid loops
          // AND only if user is not actively changing it
          if (!id(spinbox_user_changing)) {
            if (id(ha_target_temp).has_state()) {
              ESP_LOGD("temp", "Target temp has state: %.1f", id(ha_target_temp).state);
              if (!isnan(id(ha_target_temp).state)) {
                int32_t current_spinbox_value = lv_spinbox_get_value(id(temp_spinbox));
                int32_t target_value = (int32_t)id(ha_target_temp).state;
                if (current_spinbox_value != target_value) {
                  ESP_LOGD("temp", "Updating spinbox from %d to %d", current_spinbox_value, target_value);
                  lv_spinbox_set_value(id(temp_spinbox), target_value);
                }
              } else {
                ESP_LOGW("temp", "Target temp is NaN");
              }
            } else {
              ESP_LOGW("temp", "Target temp has no state");
            }
          } else {
            ESP_LOGD("temp", "Skipping spinbox update - user is changing it");
          }

          // Update Power Button Text and Style
          if (id(ha_hvac_mode_str).has_state() && id(ha_hvac_mode_str).state == "off") {
            lv_obj_remove_style(id(power_btn), id(ac_button_active_style), LV_PART_MAIN | LV_STATE_DEFAULT);
            lv_obj_add_style(id(power_btn), id(ac_button_style), LV_PART_MAIN | LV_STATE_DEFAULT);
            lv_label_set_text(id(power_btn_label), "OFF");
          } else {
            lv_obj_remove_style(id(power_btn), id(ac_button_style), LV_PART_MAIN | LV_STATE_DEFAULT);
            lv_obj_add_style(id(power_btn), id(ac_button_active_style), LV_PART_MAIN | LV_STATE_DEFAULT);
            lv_label_set_text(id(power_btn_label), "ON");
          }

          // Update AC Status Label (Mode & Fan)
          std::string mode_str = "Mode: ";
          if (id(ha_hvac_mode_str).has_state()) {
            std::string mode = id(ha_hvac_mode_str).state;
            if (mode == "off") mode_str += "OFF";
            else if (mode == "auto") mode_str += "Auto";
            else if (mode == "cool") mode_str += "Cool";
            else if (mode == "heat") mode_str += "Heat";
            else if (mode == "fan_only") mode_str += "Fan";
            else if (mode == "dry") mode_str += "Dry";
            else mode_str += mode; // Show whatever the mode is
          } else {
            mode_str += "--";
          }

          std::string fan_mode_str = "Fan: ";
          if (id(ha_fan_mode_str).has_state()) {
            std::string fan_mode = id(ha_fan_mode_str).state;
            if (fan_mode == "auto") fan_mode_str += "Auto";
            else if (fan_mode == "low") fan_mode_str += "Low";
            else if (fan_mode == "medium") fan_mode_str += "Med";
            else if (fan_mode == "high") fan_mode_str += "High";
            else fan_mode_str += fan_mode; // Show whatever the fan mode is
          } else {
            fan_mode_str += "--";
          }
          // Add ambient temperature to status
          std::string temp_str = "Temp: ";
          if (id(ha_ambient_temp).has_state()) {
            ESP_LOGD("temp", "Ambient temp has state: %.1f", id(ha_ambient_temp).state);
            if (id(ha_ambient_temp).state > -50 && !isnan(id(ha_ambient_temp).state)) {
              char temp_buf[16];
              snprintf(temp_buf, sizeof(temp_buf), "%.0f°C", id(ha_ambient_temp).state);
              temp_str += temp_buf;
            } else {
              temp_str += "--°C";
            }
          } else {
            temp_str += "--°C";
          }
          
          lv_label_set_text_fmt(id(ac_status_label), "%s\n%s\n%s", mode_str.c_str(), fan_mode_str.c_str(), temp_str.c_str());

          // Helper lambda to update button styles
          auto update_button_style = [&](lv_obj_t* btn, bool active) {
            if (active) {
              lv_obj_remove_style(btn, id(ac_button_style), LV_PART_MAIN | LV_STATE_DEFAULT);
              lv_obj_add_style(btn, id(ac_button_active_style), LV_PART_MAIN | LV_STATE_DEFAULT);
            } else {
              lv_obj_remove_style(btn, id(ac_button_active_style), LV_PART_MAIN | LV_STATE_DEFAULT);
              lv_obj_add_style(btn, id(ac_button_style), LV_PART_MAIN | LV_STATE_DEFAULT);
            }
          };
          
          // Update Mode Button Styles
          std::string current_mode = id(ha_hvac_mode_str).has_state() ? id(ha_hvac_mode_str).state : "";
          update_button_style(id(mode_auto_btn), current_mode == "auto");
          update_button_style(id(mode_cool_btn), current_mode == "cool");
          update_button_style(id(mode_heat_btn), current_mode == "heat");
          // Add other mode buttons here

          // Update Fan Button Styles
          std::string current_fan_mode = id(ha_fan_mode_str).has_state() ? id(ha_fan_mode_str).state : "";
          update_button_style(id(fan_auto_btn), current_fan_mode == "auto");
          update_button_style(id(fan_low_btn), current_fan_mode == "low");
          update_button_style(id(fan_med_btn), current_fan_mode == "medium");
          update_button_style(id(fan_high_btn), current_fan_mode == "high");
          // Add other fan buttons here

captive_portal:

